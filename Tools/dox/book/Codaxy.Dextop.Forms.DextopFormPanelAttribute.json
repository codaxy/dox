{
  "FullName": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
  "Type": {
    "BaseTypes": [
      "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
      "System.Runtime.InteropServices._Attribute",
      "Codaxy.Dextop.Forms.IDextopFormLabelable"
    ],
    "Namespace": "Codaxy.Dextop.Forms",
    "ProtectionLevel": 0,
    "TypeKind": 1,
    "Methods": [
      {
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 1,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": null,
        "Description": null,
        "DescriptionTree": [
          {
            "Type": 0,
            "Text": "\n            Initializes a new instance of the ",
            "Ref": null,
            "Children": null
          },
          {
            "Type": 3,
            "Text": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
            "Ref": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
            "Children": null
          },
          {
            "Type": 0,
            "Text": " class.\n            ",
            "Ref": null,
            "Children": null
          }
        ],
        "HasDescription": true,
        "Name": "DextopFormPanelAttribute",
        "RefId": "#ctor()"
      },
      {
        "Parameters": [
          {
            "ParameterFlags": 0,
            "TypeName": "System.Int32",
            "Description": "The level.",
            "DescriptionTree": null,
            "HasDescription": true,
            "Name": "level",
            "RefId": null
          }
        ],
        "ReturnDescription": null,
        "MemberFlag": 1,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": null,
        "Description": null,
        "DescriptionTree": [
          {
            "Type": 0,
            "Text": "\n            Initializes a new instance of the ",
            "Ref": null,
            "Children": null
          },
          {
            "Type": 3,
            "Text": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
            "Ref": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
            "Children": null
          },
          {
            "Type": 0,
            "Text": " class.\n            ",
            "Ref": null,
            "Children": null
          }
        ],
        "HasDescription": true,
        "Name": "DextopFormPanelAttribute",
        "RefId": "#ctor(System.Int32)"
      },
      {
        "Parameters": [
          {
            "ParameterFlags": 0,
            "TypeName": "System.String",
            "Description": "Name of the member.",
            "DescriptionTree": null,
            "HasDescription": true,
            "Name": "memberName",
            "RefId": null
          },
          {
            "ParameterFlags": 0,
            "TypeName": "System.Type",
            "Description": "Type of the member.",
            "DescriptionTree": null,
            "HasDescription": true,
            "Name": "memberType",
            "RefId": null
          }
        ],
        "ReturnDescription": "",
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "Codaxy.Dextop.Forms.DextopFormContainer",
        "Description": "\n            Converts this attribute to a Dextop container.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "ToContainer",
        "RefId": "ToContainer(System.String,System.Type)"
      }
    ],
    "Parameters": null,
    "Properties": [
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.Boolean",
        "Description": "\n            Set to true to completely hide the label element (fieldLabel and labelSeparator).\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "hideLabel",
        "RefId": "hideLabel"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.Boolean",
        "Description": "\n            When set to true, the label element (fieldLabel and labelSeparator) will be automatically hidden if the fieldLabel is empty. Setting this to false will cause the empty label element to be rendered and space to be reserved for it; this is useful if you want a field without a label to line up with other labeled fields in the same form.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "hideEmptyLabel",
        "RefId": "hideEmptyLabel"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.String",
        "Description": "\n            The label for the field. It gets appended with the labelSeparator, and its position and sizing is determined by the labelAlign, labelWidth, and labelPad configs.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "fieldLabel",
        "RefId": "fieldLabel"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.String",
        "Description": "\n            The CSS class to use when marking the component invalid (defaults to 'x-form-invalid')\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "invalidCls",
        "RefId": "invalidCls"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.String",
        "Description": "\n            Controls the position and alignment of the fieldLabel. Valid values are:\n            - \"left\" (the default) - The label is positioned to the left of the field, with its text aligned to the left. Its width is determined by the labelWidth config.\n            - \"top\" - The label is positioned above the field.\n            - \"right\" - The label is positioned to the left of the field, with its text aligned to the right. Its width is determined by the labelWidth config.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "labelAlign",
        "RefId": "labelAlign"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.String",
        "Description": "\n            The CSS class to be applied to the label element. Defaults to 'x-form-item-label'.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "labelCls",
        "RefId": "labelCls"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.Int32",
        "Description": "\n            The amount of space in pixels between the fieldLabel and the input field. Defaults to 5.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "labelPad",
        "RefId": "labelPad"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.String",
        "Description": "\n            Character(s) to be inserted at the end of the label text.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "labelSeparator",
        "RefId": "labelSeparator"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.String",
        "Description": "\n            A CSS style specification string to apply directly to this field's label.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "labelStyle",
        "RefId": "labelStyle"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.Int32",
        "Description": "\n            The width of the fieldLabel in pixels. Only applicable if the labelAlign is set to \"left\" or \"right\". Defaults to 100.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "labelWidth",
        "RefId": "labelWidth"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.String",
        "Description": "\n            The location where the error message text should display. Must be one of the following values:\n            - qtip - Display a quick tip containing the message when the user hovers over the field. This is the default.\n            Ext.tip.QuickTipManager.init must have been called for this setting to work.\n            - title - Display the message in a default browser title attribute popup.\n            under Add a block div beneath the field containing the error message.\n            - side - Add an error icon to the right of the field, displaying the message in a popup on hover.\n            - none - Don't display any error message. This might be useful if you are implementing custom error display.\n            - [element id] - Add the error message directly to the innerHTML of the specified element.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "msgTarget",
        "RefId": "msgTarget"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 8,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
        "TypeName": "System.Boolean",
        "Description": "\n            /// true to disable displaying any error message set on this object. Defaults to false.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "preventMark",
        "RefId": "preventMark"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.Int32",
        "Description": "\n            Gets or sets the level. Use level to define a tree of items. All items with higher level belong to the first container of lower level.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "Level",
        "RefId": "Level"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "title",
        "RefId": "title"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "xtype",
        "RefId": "xtype"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "itemId",
        "RefId": "itemId"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "layout",
        "RefId": "layout"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "margins",
        "RefId": "margins"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "fieldDefaults",
        "RefId": "fieldDefaults"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "defaults",
        "RefId": "defaults"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "style",
        "RefId": "style"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "bodyStyle",
        "RefId": "bodyStyle"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.Boolean",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "border",
        "RefId": "border"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.Boolean",
        "Description": "\n            \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "autoHeight",
        "RefId": "autoHeight"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String[]",
        "Description": "\n            List of items to be prepended to the items property. Note that items have to defined on the client side.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "PrependItems",
        "RefId": "PrependItems"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            Raw JS to be added to the object\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "RawJS",
        "RefId": "RawJS"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String[]",
        "Description": "\n            List of items to be appended to the items property. Note that items have to defined on the client side.\n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "AppendItems",
        "RefId": "AppendItems"
      },
      {
        "CanRead": true,
        "CanWrite": true,
        "Parameters": null,
        "ReturnDescription": null,
        "MemberFlag": 0,
        "ProtectionLevel": 0,
        "DeclaringType": "Codaxy.Dextop.Forms.DextopFormContainerAttribute",
        "TypeName": "System.String",
        "Description": "\n            This value is what tells the layout how an item should be anchored to the container. \n            ",
        "DescriptionTree": null,
        "HasDescription": true,
        "Name": "anchor",
        "RefId": "anchor"
      }
    ],
    "Fields": null,
    "Events": null,
    "MemberDelegates": null,
    "FullName": "Codaxy.Dextop.Forms.DextopFormPanelAttribute",
    "Description": "\n            Ext.panel.Panel\n            ",
    "DescriptionTree": null,
    "HasDescription": true,
    "Name": "DextopFormPanelAttribute",
    "RefId": null
  },
  "DbElement": null,
  "FormatCode": "cs",
  "Title": "DextopFormPanelAttribute",
  "SearchItems": [
    {
      "SectionName": "DextopFormPanelAttribute",
      "SectionDescription": null,
      "SectionType": 5
    },
    {
      "SectionName": "DextopFormPanelAttribute",
      "SectionDescription": null,
      "SectionType": 5
    },
    {
      "SectionName": "ToContainer",
      "SectionDescription": "\n            Converts this attribute to a Dextop container.\n            ",
      "SectionType": 5
    },
    {
      "SectionName": "hideLabel",
      "SectionDescription": "\n            Set to true to completely hide the label element (fieldLabel and labelSeparator).\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "hideEmptyLabel",
      "SectionDescription": "\n            When set to true, the label element (fieldLabel and labelSeparator) will be automatically hidden if the fieldLabel is empty. Setting this to false will cause the empty label element to be rendered and space to be reserved for it; this is useful if you want a field without a label to line up with other labeled fields in the same form.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "fieldLabel",
      "SectionDescription": "\n            The label for the field. It gets appended with the labelSeparator, and its position and sizing is determined by the labelAlign, labelWidth, and labelPad configs.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "invalidCls",
      "SectionDescription": "\n            The CSS class to use when marking the component invalid (defaults to 'x-form-invalid')\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "labelAlign",
      "SectionDescription": "\n            Controls the position and alignment of the fieldLabel. Valid values are:\n            - \"left\" (the default) - The label is positioned to the left of the field, with its text aligned to the left. Its width is determined by the labelWidth config.\n            - \"top\" - The label is positioned above the field.\n            - \"right\" - The label is positioned to the left of the field, with its text aligned to the right. Its width is determined by the labelWidth config.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "labelCls",
      "SectionDescription": "\n            The CSS class to be applied to the label element. Defaults to 'x-form-item-label'.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "labelPad",
      "SectionDescription": "\n            The amount of space in pixels between the fieldLabel and the input field. Defaults to 5.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "labelSeparator",
      "SectionDescription": "\n            Character(s) to be inserted at the end of the label text.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "labelStyle",
      "SectionDescription": "\n            A CSS style specification string to apply directly to this field's label.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "labelWidth",
      "SectionDescription": "\n            The width of the fieldLabel in pixels. Only applicable if the labelAlign is set to \"left\" or \"right\". Defaults to 100.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "msgTarget",
      "SectionDescription": "\n            The location where the error message text should display. Must be one of the following values:\n            - qtip - Display a quick tip containing the message when the user hovers over the field. This is the default.\n            Ext.tip.QuickTipManager.init must have been called for this setting to work.\n            - title - Display the message in a default browser title attribute popup.\n            under Add a block div beneath the field containing the error message.\n            - side - Add an error icon to the right of the field, displaying the message in a popup on hover.\n            - none - Don't display any error message. This might be useful if you are implementing custom error display.\n            - [element id] - Add the error message directly to the innerHTML of the specified element.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "preventMark",
      "SectionDescription": "\n            /// true to disable displaying any error message set on this object. Defaults to false.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "Level",
      "SectionDescription": "\n            Gets or sets the level. Use level to define a tree of items. All items with higher level belong to the first container of lower level.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "title",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "xtype",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "itemId",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "layout",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "margins",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "fieldDefaults",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "defaults",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "style",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "bodyStyle",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "border",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "autoHeight",
      "SectionDescription": "\n            \n            ",
      "SectionType": 4
    },
    {
      "SectionName": "PrependItems",
      "SectionDescription": "\n            List of items to be prepended to the items property. Note that items have to defined on the client side.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "RawJS",
      "SectionDescription": "\n            Raw JS to be added to the object\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "AppendItems",
      "SectionDescription": "\n            List of items to be appended to the items property. Note that items have to defined on the client side.\n            ",
      "SectionType": 4
    },
    {
      "SectionName": "anchor",
      "SectionDescription": "\n            This value is what tells the layout how an item should be anchored to the container. \n            ",
      "SectionType": 4
    }
  ]
}